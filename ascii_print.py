#!/usr/bin/env python

alphabet_dict = {
  'a': [[35], [35], [16, 3, 16], [15, 5, 15], [14, 7, 14], [13, 9, 13], [12, 11, 12], [11, 13, 11], [10, 7, 1, 7, 10], [9, 7, 3, 7, 9], [8, 7, 5, 7, 8], [7, 21, 7], [6, 23, 6], [5, 25, 5], [4, 7, 13, 7, 4], [3, 7, 15, 7, 3], [2, 7, 17, 7, 2], [1, 7, 19, 7, 1], [35], [35]],
  'b': [[22], [22], [1, 17, 4], [1, 18, 3], [1, 19, 2], [1, 8, 5, 7, 1], [3, 6, 5, 7, 1], [3, 6, 5, 7, 1], [3, 17, 2], [3, 16, 3], [3, 17, 2], [3, 6, 5, 7, 1], [3, 6, 5, 7, 1], [3, 6, 5, 7, 1], [1, 20, 1], [1, 19, 2], [1, 18, 3], [1, 17, 4], [22], [22]],
  'c': [[23], [23], [9, 13, 1], [6, 16, 1], [4, 18, 1], [3, 19, 1], [2, 7, 7, 6, 1], [1, 7, 15], [1, 7, 15], [1, 7, 15], [1, 7, 15], [1, 7, 15], [1, 7, 15], [2, 7, 7, 6, 1], [3, 19, 1], [4, 18, 1], [6, 16, 1], [9, 13, 1], [23], [23]],
  'd': [[23], [23], [1, 13, 9], [1, 16, 6], [1, 18, 4], [1, 19, 3], [3, 7, 4, 7, 2], [3, 7, 5, 7, 1], [3, 7, 5, 7, 1], [3, 7, 5, 7, 1], [3, 7, 5, 7, 1], [3, 7, 5, 7, 1], [3, 7, 5, 7, 1], [3, 7, 4, 7, 2], [1, 19, 3], [1, 18, 4], [1, 16, 6], [1, 13, 9], [23], [23]],
  'e': [[24], [24], [1, 22, 1], [1, 22, 1], [1, 22, 1], [1, 22, 1], [3, 7, 7, 6, 1], [3, 7, 14], [3, 17, 4], [3, 17, 4], [3, 17, 4], [3, 17, 4], [3, 7, 14], [3, 7, 7, 6, 1], [1, 22, 1], [1, 22, 1], [1, 22, 1], [1, 22, 1], [24], [24]],
  'f': [[24], [24], [1, 22, 1], [1, 22, 1], [1, 22, 1], [1, 22, 1], [3, 7, 7, 6, 1], [3, 7, 14], [3, 17, 4], [3, 17, 4], [3, 17, 4], [3, 17, 4], [3, 7, 14], [3, 7, 14], [1, 11, 12], [1, 11, 12], [1, 11, 12], [1, 11, 12], [24], [24]],
  'g': [[23], [23], [9, 13, 1], [6, 16, 1], [4, 18, 1], [3, 19, 1], [2, 7, 7, 6, 1], [1, 7, 15], [1, 7, 15], [1, 7, 4, 10, 1], [1, 7, 4, 10, 1], [1, 7, 4, 10, 1], [1, 7, 8, 6, 1], [2, 7, 7, 6, 1], [3, 19, 1], [4, 18, 1], [6, 16, 1], [9, 6, 3, 4, 1], [23], [23]],
  'h': [[25], [25], [1, 9, 5, 9, 1], [1, 9, 5, 9, 1], [1, 9, 5, 9, 1], [1, 9, 5, 9, 1], [3, 7, 5, 7, 3], [3, 7, 5, 7, 3], [3, 19, 3], [3, 19, 3], [3, 19, 3], [3, 19, 3], [3, 7, 5, 7, 3], [3, 7, 5, 7, 3], [1, 9, 5, 9, 1], [1, 9, 5, 9, 1], [1, 9, 5, 9, 1], [1, 9, 5, 9, 1], [25], [25]],
  'i': [[12], [12], [1, 10, 1], [1, 10, 1], [1, 10, 1], [1, 10, 1], [3, 6, 3], [3, 6, 3], [3, 6, 3], [3, 6, 3], [3, 6, 3], [3, 6, 3], [3, 6, 3], [3, 6, 3], [1, 10, 1], [1, 10, 1], [1, 10, 1], [1, 10, 1], [12], [12]],
  'j': [[23], [23], [11, 11, 1], [11, 11, 1], [11, 11, 1], [11, 11, 1], [13, 7, 3], [13, 7, 3], [13, 7, 3], [13, 7, 3], [13, 7, 3], [1, 7, 5, 7, 3], [1, 7, 5, 7, 3], [1, 8, 3, 8, 3], [1, 19, 3], [2, 17, 4], [4, 13, 6], [6, 9, 8], [23], [23]],
  'k': [[22], [22], [1, 9, 4, 7, 1], [1, 9, 4, 7, 1], [1, 9, 4, 7, 1], [1, 9, 3, 8, 1], [1, 9, 2, 9, 1], [3, 7, 1, 7, 4], [3, 14, 5], [3, 13, 6], [3, 13, 6], [3, 14, 5], [3, 7, 1, 7, 4], [1, 9, 2, 9, 1], [1, 9, 3, 8, 1], [1, 9, 4, 7, 1], [1, 9, 4, 7, 1], [1, 9, 4, 7, 1], [22], [22]],
  'l': [[24], [24], [1, 11, 12], [1, 11, 12], [1, 11, 12], [1, 11, 12], [3, 7, 14], [3, 7, 14], [3, 7, 14], [3, 7, 14], [3, 7, 14], [3, 7, 14], [3, 7, 14], [3, 7, 7, 6, 1], [1, 22, 1], [1, 22, 1], [1, 22, 1], [1, 22, 1], [24], [24]],
  'm': [[33], [33], [1, 8, 15, 8, 1], [1, 9, 13, 9, 1], [1, 10, 11, 10, 1], [1, 11, 9, 11, 1], [1, 12, 7, 12, 1], [1, 13, 5, 13, 1], [1, 14, 3, 14, 1], [1, 8, 1, 6, 1, 6, 1, 8, 1], [1, 8, 2, 11, 2, 8, 1], [1, 8, 3, 9, 3, 8, 1], [1, 8, 4, 7, 4, 8, 1], [1, 8, 5, 5, 5, 8, 1], [1, 8, 15, 8, 1], [1, 8, 15, 8, 1], [1, 8, 15, 8, 1], [1, 8, 15, 8, 1], [33], [33]],
  'n': [[26], [26], [1, 8, 8, 8, 1], [1, 9, 7, 8, 1], [1, 10, 6, 8, 1], [1, 11, 5, 8, 1], [1, 12, 4, 8, 1], [1, 13, 3, 8, 1], [1, 14, 2, 8, 1], [1, 8, 1, 6, 1, 8, 1], [1, 8, 2, 14, 1], [1, 8, 3, 13, 1], [1, 8, 4, 12, 1], [1, 8, 5, 11, 1], [1, 8, 6, 10, 1], [1, 8, 7, 9, 1], [1, 8, 8, 8, 1], [1, 8, 9, 7, 1], [26], [26]],
  'o': [[21], [21], [6, 9, 6], [4, 13, 4], [2, 17, 2], [1, 19, 1], [1, 8, 3, 8, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 8, 3, 8, 1], [1, 19, 1], [2, 17, 2], [4, 13, 4], [6, 9, 6], [21], [21]],
  'p': [[22], [22], [1, 17, 4], [1, 18, 3], [1, 19, 2], [1, 8, 5, 7, 1], [3, 6, 5, 7, 1], [3, 6, 5, 7, 1], [3, 17, 2], [3, 16, 3], [3, 14, 5], [3, 6, 13], [3, 6, 13], [3, 6, 13], [1, 10, 11], [1, 10, 11], [1, 10, 11], [1, 10, 11], [22], [22]],
  'q': [[21], [21], [6, 9, 6], [4, 13, 4], [2, 17, 2], [1, 19, 1], [1, 8, 3, 8, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 5, 7, 1], [1, 7, 2, 2, 1, 7, 1], [1, 8, 2, 9, 1], [1, 19, 1], [2, 17, 2], [4, 14, 3], [6, 9, 1, 2, 3], [17, 2, 2], [21]],
  'r': [[22], [22], [1, 17, 4], [1, 18, 3], [1, 19, 2], [1, 8, 5, 7, 1], [3, 6, 5, 7, 1], [3, 6, 5, 7, 1], [3, 17, 2], [3, 16, 3], [3, 17, 2], [3, 6, 5, 7, 1], [3, 6, 5, 7, 1], [3, 6, 5, 7, 1], [1, 8, 5, 7, 1], [1, 8, 5, 7, 1], [1, 8, 5, 7, 1], [1, 8, 5, 7, 1], [22], [22]],
  's': [[21], [21], [4, 15, 2], [2, 18, 1], [1, 19, 1], [1, 7, 5, 7, 1], [1, 7, 13], [1, 7, 13], [2, 9, 10], [3, 13, 5], [5, 13, 3], [8, 11, 2], [13, 7, 1], [13, 7, 1], [1, 7, 5, 7, 1], [1, 19, 1], [1, 18, 2], [2, 15, 4], [21], [21]],
  't': [[25], [25], [1, 23, 1], [1, 23, 1], [1, 23, 1], [1, 23, 1], [1, 6, 2, 7, 2, 6, 1], [9, 7, 9], [9, 7, 9], [9, 7, 9], [9, 7, 9], [9, 7, 9], [9, 7, 9], [9, 7, 9], [7, 11, 7], [7, 11, 7], [7, 11, 7], [7, 11, 7], [25], [25]],
  'u': [[23], [23], [1, 8, 5, 8, 1], [1, 8, 5, 8, 1], [1, 8, 5, 8, 1], [1, 8, 5, 8, 1], [2, 7, 5, 7, 2], [2, 7, 5, 7, 2], [2, 7, 5, 7, 2], [2, 7, 5, 7, 2], [2, 7, 5, 7, 2], [2, 7, 5, 7, 2], [2, 7, 5, 7, 2], [2, 8, 3, 8, 2], [2, 19, 2], [3, 17, 3], [5, 13, 5], [7, 9, 7], [23], [23]],
  'v': [[29], [29], [1, 8, 11, 8, 1], [1, 8, 11, 8, 1], [1, 8, 11, 8, 1], [1, 8, 11, 8, 1], [2, 7, 11, 7, 2], [3, 7, 9, 7, 3], [4, 7, 7, 7, 4], [5, 7, 5, 7, 5], [6, 7, 3, 7, 6], [7, 7, 1, 7, 7], [8, 13, 8], [9, 11, 9], [10, 9, 10], [11, 7, 11], [12, 5, 12], [13, 3, 13], [29], [29]],
  'w': [[45], [45], [1, 8, 27, 8, 1], [1, 8, 27, 8, 1], [1, 8, 27, 8, 1], [1, 8, 27, 8, 1], [2, 7, 11, 5, 11, 7, 2], [3, 7, 9, 7, 9, 7, 3], [4, 7, 7, 9, 7, 7, 4], [5, 7, 5, 11, 5, 7, 5], [6, 7, 3, 13, 3, 7, 6], [7, 7, 1, 7, 1, 7, 1, 7, 7], [8, 13, 3, 13, 8], [9, 11, 5, 11, 9], [10, 9, 7, 9, 10], [11, 7, 9, 7, 11], [12, 5, 11, 5, 12], [13, 3, 13, 3, 13], [45], [45]],
  'x': [[23], [23], [1, 7, 7, 7, 1], [1, 7, 7, 7, 1], [1, 7, 7, 7, 1], [1, 8, 5, 8, 1], [1, 9, 3, 9, 1], [4, 7, 1, 7, 4], [5, 13, 5], [6, 11, 6], [6, 11, 6], [5, 13, 5], [4, 7, 1, 7, 4], [1, 9, 3, 9, 1], [1, 8, 5, 8, 1], [1, 7, 7, 7, 1], [1, 7, 7, 7, 1], [1, 7, 7, 7, 1], [23], [23]],
  'y': [[23], [23], [1, 7, 7, 7, 1], [1, 7, 7, 7, 1], [1, 7, 7, 7, 1], [1, 8, 5, 8, 1], [1, 9, 3, 9, 1], [4, 7, 1, 7, 4], [5, 13, 5], [6, 11, 6], [7, 9, 7], [8, 7, 8], [8, 7, 8], [8, 7, 8], [8, 7, 8], [5, 13, 5], [5, 13, 5], [5, 13, 5], [23], [23]],
  'z': [[21], [21], [1, 19, 1], [1, 19, 1], [1, 19, 1], [1, 18, 2], [1, 5, 5, 7, 3], [9, 7, 5], [8, 7, 6], [7, 7, 7], [6, 7, 8], [5, 7, 9], [4, 7, 10], [1, 9, 5, 5, 1], [1, 19, 1], [1, 19, 1], [1, 19, 1], [1, 19, 1], [21], [21]]
}


def print_this(string, outer='X', inner=' ', char_outer=0, char_inner=0):
    """

    :param string:      The string to transform
    :param outer:       The outer symbol
    :param inner:       The inner symbol
    :param char_inner:  1: The character (lowercase) itself as the inner symbol
                        2: The character (uppercase) itself as the inner symbol
    :param char_outer:  1: The character (lowercase) itself as the outer symbol
                        2: The character (uppercase) itself as the outer symbol
    :return:            The transformed string -> list of 20 elements
    """
    return_list = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
    for character in string.lower():
        if char_inner:
            inner = character
            if char_inner == 2:
                inner = character.upper()
        if char_outer:
            outer = character
            if char_outer == 2:
                outer = character.upper()
        print(inner, outer)
        char = alphabet_dict[character]
        for index_row, row in enumerate(char):
            for index_elem, elem in enumerate(row):
                if index_elem % 2 == 0:     # OUTER
                    return_list[index_row] += outer * elem
                else:                       # INNER
                    return_list[index_row] += inner * elem

    return return_list


if __name__ == '__main__':
    result = print_this('chinche', ' ', '.', char_inner=2, char_outer=1)
    for line in result:
        print(''.join(line))
